import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PlotlyService } from './plotly.service';
import { PlotlySharedModule } from './plotly-shared.module';
export class PlotlyViaCDNModule {
    constructor(plotlyService) {
        this.plotlyService = plotlyService;
        PlotlyService.setModuleName('ViaCDN');
    }
    static setPlotlyVersion(version) {
        const isOk = version === 'latest' || /^\d\.\d{1,2}\.\d{1,2}$/.test(version);
        if (!isOk) {
            throw new Error(`Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)`);
        }
        PlotlyViaCDNModule.loadViaCDN();
        PlotlyViaCDNModule.plotlyVersion = version;
    }
    static setPlotlyBundle(bundle) {
        const isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;
        if (!isOk) {
            const names = PlotlyViaCDNModule.plotlyBundleNames.map(n => `"${n}"`).join(', ');
            throw new Error(`Invalid plotly bundle. Please set to null for full or ${names} for a partial bundle.`);
        }
        PlotlyViaCDNModule.plotlyBundle = bundle;
    }
    static loadViaCDN() {
        PlotlyService.setPlotly('waiting');
        const init = () => {
            const src = PlotlyViaCDNModule.plotlyBundle == null
                ? `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule.plotlyVersion}.min.js`
                : `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule.plotlyBundle}-${PlotlyViaCDNModule.plotlyVersion}.min.js`;
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = src;
            script.onerror = () => console.error(`Error loading plotly.js library from ${src}`);
            const head = document.getElementsByTagName('head')[0];
            head.appendChild(script);
            let counter = 200; // equivalent of 10 seconds...
            const fn = () => {
                const plotly = window.Plotly;
                if (plotly) {
                    PlotlyService.setPlotly(plotly);
                }
                else if (counter > 0) {
                    counter--;
                    setTimeout(fn, 50);
                }
                else {
                    throw new Error(`Error loading plotly.js library from ${src}. Timeout.`);
                }
            };
            fn();
        };
        setTimeout(init);
    }
}
PlotlyViaCDNModule.plotlyBundle = null;
PlotlyViaCDNModule.plotlyVersion = 'latest';
PlotlyViaCDNModule.plotlyBundleNames = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];
PlotlyViaCDNModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [CommonModule, PlotlySharedModule],
                providers: [PlotlyService],
                exports: [PlotlySharedModule],
            },] }
];
PlotlyViaCDNModule.ctorParameters = () => [
    { type: PlotlyService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdGx5LXZpYS1jZG4ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvcGxvdGx5L3NyYy9saWIvcGxvdGx5LXZpYS1jZG4ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVk1RCxNQUFNLE9BQU8sa0JBQWtCO0lBSzNCLFlBQW1CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzNDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFlO1FBQ25DLE1BQU0sSUFBSSxHQUFHLE9BQU8sS0FBSyxRQUFRLElBQUksd0JBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDUCxNQUFNLElBQUksS0FBSyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7U0FDbEc7UUFFRCxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoQyxrQkFBa0IsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQXdCO1FBQzNDLE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxJQUFJLElBQUksa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsTUFBTSxLQUFLLEdBQUcsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqRixNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxLQUFLLHdCQUF3QixDQUFDLENBQUM7U0FDM0c7UUFFRCxrQkFBa0IsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDO0lBQzdDLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVTtRQUNiLGFBQWEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFbkMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO1lBQ2QsTUFBTSxHQUFHLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxJQUFJLElBQUk7Z0JBQy9DLENBQUMsQ0FBQyw4QkFBOEIsa0JBQWtCLENBQUMsYUFBYSxTQUFTO2dCQUN6RSxDQUFDLENBQUMsOEJBQThCLGtCQUFrQixDQUFDLFlBQVksSUFBSSxrQkFBa0IsQ0FBQyxhQUFhLFNBQVMsQ0FBQztZQUVqSCxNQUFNLE1BQU0sR0FBc0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRSxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1lBQ2pCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyx3Q0FBd0MsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUVwRixNQUFNLElBQUksR0FBb0IsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFekIsSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUMsOEJBQThCO1lBRWpELE1BQU0sRUFBRSxHQUFHLEdBQUcsRUFBRTtnQkFDWixNQUFNLE1BQU0sR0FBSSxNQUFjLENBQUMsTUFBTSxDQUFDO2dCQUN0QyxJQUFJLE1BQU0sRUFBRTtvQkFDUixhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUNuQztxQkFBTSxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7b0JBQ3BCLE9BQU8sRUFBRyxDQUFDO29CQUNYLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7aUJBQ3RCO3FCQUFNO29CQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLEdBQUcsWUFBWSxDQUFDLENBQUM7aUJBQzVFO1lBQ0wsQ0FBQyxDQUFDO1lBRUYsRUFBRSxFQUFFLENBQUM7UUFDVCxDQUFDLENBQUM7UUFFRixVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckIsQ0FBQzs7QUE5RGMsK0JBQVksR0FBWSxJQUFJLENBQUM7QUFDN0IsZ0NBQWEsR0FBRyxRQUFRLENBQUM7QUFDMUIsb0NBQWlCLEdBQXVCLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7O1lBVDVILFFBQVEsU0FBQztnQkFDTixZQUFZLEVBQUUsRUFBRTtnQkFDaEIsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGtCQUFrQixDQUFDO2dCQUMzQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLENBQUM7Z0JBQzFCLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQ2hDOzs7WUFaUSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFBsb3RseVNlcnZpY2UgfSBmcm9tICcuL3Bsb3RseS5zZXJ2aWNlJztcbmltcG9ydCB7IFBsb3RseVNoYXJlZE1vZHVsZSB9IGZyb20gJy4vcGxvdGx5LXNoYXJlZC5tb2R1bGUnO1xuXG5cbmV4cG9ydCB0eXBlIFBsb3RseUJ1bmRsZU5hbWUgPSAnYmFzaWMnIHwgJ2NhcnRlc2lhbicgfCAnZ2VvJyB8ICdnbDNkJyB8ICdnbDJkJyB8ICdtYXBib3gnIHwgJ2ZpbmFuY2UnO1xuXG5cbkBOZ01vZHVsZSh7XG4gICAgZGVjbGFyYXRpb25zOiBbXSxcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBQbG90bHlTaGFyZWRNb2R1bGVdLFxuICAgIHByb3ZpZGVyczogW1Bsb3RseVNlcnZpY2VdLFxuICAgIGV4cG9ydHM6IFtQbG90bHlTaGFyZWRNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBQbG90bHlWaWFDRE5Nb2R1bGUge1xuICAgIHByaXZhdGUgc3RhdGljIHBsb3RseUJ1bmRsZT86IHN0cmluZyA9IG51bGw7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcGxvdGx5VmVyc2lvbiA9ICdsYXRlc3QnO1xuICAgIHB1YmxpYyBzdGF0aWMgcGxvdGx5QnVuZGxlTmFtZXM6IFBsb3RseUJ1bmRsZU5hbWVbXSA9IFsnYmFzaWMnLCAnY2FydGVzaWFuJywgJ2dlbycsICdnbDNkJywgJ2dsMmQnLCAnbWFwYm94JywgJ2ZpbmFuY2UnXTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwbG90bHlTZXJ2aWNlOiBQbG90bHlTZXJ2aWNlKSB7XG4gICAgICAgIFBsb3RseVNlcnZpY2Uuc2V0TW9kdWxlTmFtZSgnVmlhQ0ROJyk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldFBsb3RseVZlcnNpb24odmVyc2lvbjogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGlzT2sgPSB2ZXJzaW9uID09PSAnbGF0ZXN0JyB8fCAvXlxcZFxcLlxcZHsxLDJ9XFwuXFxkezEsMn0kLy50ZXN0KHZlcnNpb24pO1xuICAgICAgICBpZiAoIWlzT2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwbG90bHkgdmVyc2lvbi4gUGxlYXNlIHNldCAnbGF0ZXN0JyBvciB2ZXJzaW9uIG51bWJlciAoaS5lLjogMS40LjMpYCk7XG4gICAgICAgIH1cblxuICAgICAgICBQbG90bHlWaWFDRE5Nb2R1bGUubG9hZFZpYUNETigpO1xuICAgICAgICBQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5VmVyc2lvbiA9IHZlcnNpb247XG4gICAgfVxuXG4gICAgc3RhdGljIHNldFBsb3RseUJ1bmRsZShidW5kbGU6IFBsb3RseUJ1bmRsZU5hbWUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaXNPayA9IGJ1bmRsZSA9PT0gbnVsbCB8fCBQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5QnVuZGxlTmFtZXMuaW5kZXhPZihidW5kbGUpID49IDA7XG4gICAgICAgIGlmICghaXNPaykge1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5QnVuZGxlTmFtZXMubWFwKG4gPT4gYFwiJHtufVwiYCkuam9pbignLCAnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwbG90bHkgYnVuZGxlLiBQbGVhc2Ugc2V0IHRvIG51bGwgZm9yIGZ1bGwgb3IgJHtuYW1lc30gZm9yIGEgcGFydGlhbCBidW5kbGUuYCk7XG4gICAgICAgIH1cblxuICAgICAgICBQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5QnVuZGxlID0gYnVuZGxlO1xuICAgIH1cblxuICAgIHN0YXRpYyBsb2FkVmlhQ0ROKCk6IHZvaWQge1xuICAgICAgICBQbG90bHlTZXJ2aWNlLnNldFBsb3RseSgnd2FpdGluZycpO1xuXG4gICAgICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzcmMgPSBQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5QnVuZGxlID09IG51bGxcbiAgICAgICAgICAgICAgICA/IGBodHRwczovL2Nkbi5wbG90Lmx5L3Bsb3RseS0ke1Bsb3RseVZpYUNETk1vZHVsZS5wbG90bHlWZXJzaW9ufS5taW4uanNgXG4gICAgICAgICAgICAgICAgOiBgaHR0cHM6Ly9jZG4ucGxvdC5seS9wbG90bHktJHtQbG90bHlWaWFDRE5Nb2R1bGUucGxvdGx5QnVuZGxlfS0ke1Bsb3RseVZpYUNETk1vZHVsZS5wbG90bHlWZXJzaW9ufS5taW4uanNgO1xuXG4gICAgICAgICAgICBjb25zdCBzY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICAgICAgc2NyaXB0LnNyYyA9IHNyYztcbiAgICAgICAgICAgIHNjcmlwdC5vbmVycm9yID0gKCkgPT4gY29uc29sZS5lcnJvcihgRXJyb3IgbG9hZGluZyBwbG90bHkuanMgbGlicmFyeSBmcm9tICR7c3JjfWApO1xuXG4gICAgICAgICAgICBjb25zdCBoZWFkOiBIVE1MSGVhZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXG4gICAgICAgICAgICBsZXQgY291bnRlciA9IDIwMDsgLy8gZXF1aXZhbGVudCBvZiAxMCBzZWNvbmRzLi4uXG5cbiAgICAgICAgICAgIGNvbnN0IGZuID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsb3RseSA9ICh3aW5kb3cgYXMgYW55KS5QbG90bHk7XG4gICAgICAgICAgICAgICAgaWYgKHBsb3RseSkge1xuICAgICAgICAgICAgICAgICAgICBQbG90bHlTZXJ2aWNlLnNldFBsb3RseShwbG90bHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnRlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlciAtLTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmbiwgNTApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgbG9hZGluZyBwbG90bHkuanMgbGlicmFyeSBmcm9tICR7c3JjfS4gVGltZW91dC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmbigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNldFRpbWVvdXQoaW5pdCk7XG4gICAgfVxufVxuIl19